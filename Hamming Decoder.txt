library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity hamming_decoder is
Port (
input : in STD_LOGIC_VECTOR (6 downto 0);
output : out STD_LOGIC_VECTOR (3 downto 0);
clk: in std_logic;
err: out std_logic;
reset: in std_logic
);
end hamming_decoder;
architecture Behavioral of hamming_decoder is
signal input_reg : std_logic_vector(6 downto 0);
begin
process(clk,reset)
variable C : std_logic_vector(2 downto 0);
variable corrected_output : std_logic_vector(3 downto 0);
variable err_store : std_logic;
begin
if (rising_edge(clk)) then
if reset = '0' then
input_reg <= input;
err_store := '0';
C(0) := input_reg(6) xor input_reg(4) xor input_reg(2) xor input_reg(0) ;
C(1) := input_reg(5) xor input_reg(4) xor input_reg(1) xor input_reg(0) ;
C(2) := input_reg(3) xor input_reg(2) xor input_reg(1) xor input_reg(0) ;
case C is
when "000" =>
corrected_output := input_reg(4) & input_reg(2) & input_reg(1) & input_reg(0);
err_store := '0';
when "001" =>
corrected_output := input_reg(4) & input_reg(2) & input_reg(1) & input_reg(0);
err_store := '0';
when "010" =>
corrected_output := input_reg(4) & input_reg(2) & input_reg(1) & input_reg(0);
err_store := '0';
when "011" =>
corrected_output := not input_reg(4) & input_reg(2) & input_reg(1) & input_reg(0);
err_store := '1';
when "100" =>
corrected_output := input_reg(4) & input_reg(2) & input_reg(1) & input_reg(0);
err_store := '0';
when "101" =>
corrected_output := input_reg(4) & not input_reg(2) & input_reg(1) & input_reg(0);
err_store := '1';
when "110" =>
corrected_output := input_reg(4) & input_reg(2) & not input_reg(1) & input_reg(0);
err_store := '1';
when "111" =>
corrected_output := input_reg(4) & input_reg(2) & input_reg(1) & not input_reg(0);
err_store := '1';
when others =>
-- Handle unexpected cases
corrected_output := "UUUU";
err_store := '1';
end case;
output <= corrected_output;
err <= err_store;
elsif (reset = '1') then
output <= "0000";
err <= '0';
end if;
end if;
end process;
end architecture Behavioral;