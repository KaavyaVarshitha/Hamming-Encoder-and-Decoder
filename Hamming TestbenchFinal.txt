The Testbench/Final Instantiation:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity hamming74_encoder_tb is
end hamming74_encoder_tb;
architecture Behavioral of hamming74_encoder_tb is
signal clk : std_logic := '0';
signal reset : std_logic;
signal err : std_logic := '0';
signal data_in: std_logic_vector(3 downto 0);
signal codeword_out: std_logic_vector(6 downto 0);
signal input: std_logic_vector(6 downto 0);
signal output: std_logic_vector(3 downto 0);
signal errbus: std_logic_vector(6 downto 0);
component hamming74_encoder is
Port(
clk: in std_logic;
reset: in std_logic;
data_in: in std_logic_vector(3 downto 0);
codeword_out: out std_logic_vector(6 downto 0)
);
end component;
component hamming_decoder is
Port(
input: in std_logic_vector(6 downto 0);
output: out std_logic_vector(3 downto 0);
clk: in std_logic;
err: out std_logic;
reset: in std_logic
);
end component;
begin
encoder_inst : hamming74_encoder
port map (
clk => clk,
reset => reset,
data_in => data_in,
codeword_out => codeword_out
);
decoder_inst : hamming_decoder
port map (
input => input,
output => output,
clk => clk,
err => err,
reset => reset
);
-- Clock
clk_process : process
begin
clk <= '0';
wait for 20 ns;
clk <= '1';
wait for 20 ns;
end process;
err_bus: process(clk, reset)
begin
if (rising_edge(clk)) then
if reset = '1' then
errbus <= "0000000";
elsif reset ='0' then
input <= codeword_out xor errbus;
end if;
end if;
end process;
stimu: process
begin
reset <= '1';
wait until rising_edge(clk);
reset <= '0';
errbus <= "0000000";
data_in <= "1110";
wait for 80 ns;
data_in <= "1111";
wait for 40 ns;
data_in <= "1110";
wait for 40 ns;
data_in <= "1010";
wait for 40 ns;
data_in <= "1110";
wait;
end process;
end Behavioral;